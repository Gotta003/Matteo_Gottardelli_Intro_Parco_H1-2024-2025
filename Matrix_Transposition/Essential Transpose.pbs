#!/bin/bash
# Job name
#PBS -N transpose
# Output files
#PBS -o ./transpose.o
#PBS -e ./transpose.e
# Queue name
#PBS -q short_cpuQ
# Set the maximum wall time
#PBS -l walltime=0:20:00
# Number of nodes, cpus, mpi processors and amount of memory
#PBS -l select=1:ncpus=64:ompthreads=64:mem=1Gb
# Modules for C
module load gcc91
gcc() {
    gcc-9.1.0 "$@"
}
gcc --version
module load numactl
lscpu
# Select the working directory
cd /home/matteo.gottardelli/Project
# Functions
function execution {
    for size in {4..12}; do
        case $2 in 
            1|2|3)       
                ./transpose $1 $2 $size $3 $4
            ;;
            4|5|6|7)
                for threads in 1 2 4 8 16 32 64; do
                    export OMP_NUM_THREADS=$threads
                    if [ $threads -eq 64 ]; then
                        numactl --cpunodebind=0,1 --membind=0,1 ./transpose $1 $2 $size $3 $4 $OMP_NUM_THREADS
                    else
                        ./transpose $1 $2 $size $3 $4 $OMP_NUM_THREADS
                    fi
                done
            ;;
        esac
    done
}
function mode1 {
    gcc -O0 functions.c transpose.c -o transpose -fopenmp -lm
    execution SO0 $1 $2 $3
}
function mode2 {
    for i in {1..4}; do 
        case $i in
            1)
                gcc -O2 functions.c transpose.c -o transpose -fopenmp -lm
                execution I2 $1 $2 $3
            ;;
            2)
                gcc -O2  -ftree-vectorize functions.c transpose.c -o transpose -fopenmp -lm
                execution I2FTV $1 $2 $3
            ;;
            3)
                gcc -O2 -funroll-loops functions.c transpose.c -o transpose -fopenmp -lm
                execution I2FUN $1 $2 $3
            ;;
            4)
                gcc -O2 -ftree-vectorize -funroll-loops functions.c transpose.c -o transpose -fopenmp -lm
                execution I2FTVFUN $1 $2 $3
            ;;
        esac 
    done
}
function mode3 {
    for i in {1..4}; do 
        case $i in
            1)
                gcc -O2 functions.c transpose.c -o transpose -fopenmp -lm
                execution I2 $1 $2 $3
            ;;
            2)
                gcc -O2  -ftree-vectorize functions.c transpose.c -o transpose -fopenmp -lm
                execution I2FTV $1 $2 $3
            ;;
            3)
                gcc -O2 -funroll-loops functions.c transpose.c -o transpose -fopenmp -lm
                execution I2FUN $1 $2 $3
            ;;
            4)
                gcc -O2 -ftree-vectorize -funroll-loops functions.c transpose.c -o transpose -fopenmp -lm
                execution I2FTVFUN $1 $2 $3
            ;;
        esac 
    done
}
function mode4 {
    gcc -O2 -march=native functions.c transpose.c -o transpose -fopenmp -fopenmp-simd -lm
    export OMP_DYNAMIC=FALSE
    export OMP_SCHEDULE=STATIC
    export OMP_PROC_BIND=spread
    export OMP_PLACES=cores
    #export OMP_STACKSIZE=128M
    export OMP_WAIT_POLICY=ACTIVE
    export OMP_NESTED=TRUE
    export OMP_CANCELLATION=TRUE
    execution OMPLOCWS $1 $2 $3
}
function mode5 {
    gcc -O2 -march=native functions.c transpose.c -o transpose -fopenmp -fopenmp-simd -lm
    export OMP_DYNAMIC=FALSE
    export OMP_SCHEDULE=STATIC
    export OMP_PROC_BIND=spread
    export OMP_PLACES=cores
    #export OMP_STACKSIZE=128M
    export OMP_WAIT_POLICY=ACTIVE
    export OMP_NESTED=TRUE
    export OMP_CANCELLATION=TRUE
    execution OMPGLBWS $1 $2 $3
}
function mode6 {
    gcc -O2 -march=native -ffast-math -funroll-loops functions.c transpose.c -o transpose -fopenmp -fopenmp-simd -lm
    export OMP_DYNAMIC=FALSE
    export OMP_SCHEDULE=STATIC
    export OMP_PROC_BIND=spread
    export OMP_PLACES=cores
    #export OMP_STACKSIZE=128M
    export OMP_WAIT_POLICY=ACTIVE
    export OMP_NESTED=TRUE
    export OMP_CANCELLATION=TRUE
    execution OMPLOCBB $1 $2 $3
}
function mode7 {
    gcc -O2 -march=native -ffast-math -funroll-loops functions.c transpose.c -o transpose -fopenmp -fopenmp-simd -lm
    export OMP_DYNAMIC=FALSE
    export OMP_SCHEDULE=STATIC
    export OMP_PROC_BIND=spread #required because the system has 4 sockets and in each 24, if not spread it will saturate and won't work for 32 and 64
    export OMP_PLACES=cores
    #export OMP_STACKSIZE=128M
    export OMP_WAIT_POLICY=ACTIVE
    export OMP_NESTED=TRUE
    export OMP_CANCELLATION=TRUE
    execution OMPGLBBB $1 $2 $3
}

original="results"
copy_dir="$original"
n=1
while [[ -d $copy_dir ]]; do
    copy_dir="${original}_$n"
    ((n++))
done
mkdir -p $copy_dir
samples=25 
export OMP_NUM_THREADS
for mode in {1..7}; do 
    # The code should be compiled before submitting the job
        case $mode in
            1)
                mode1 $mode 1 $samples
            ;;
            2)
                mode2 $mode 1 $samples
            ;;
            3)
                mode3 $mode 1 $samples
            ;;
            4)
                #mode4 $mode 1 $samples
            ;;
            5)
                mode5 $mode 1 $samples
            ;;
            6)
                #mode6 $mode 1 $samples
            ;;
            7)
                mode7 $mode 1 $samples
            ;;
        esac
done
unset OMP_NUM_THREADS
mv results*.csv $copy_dir
mv times*.csv $copy_dir
exit